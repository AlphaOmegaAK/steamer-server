const eraseDatabaseOnSync = true;
 
connectDb().then(async () => {
  if (eraseDatabaseOnSync) {
    await Promise.all([
      models.User.deleteMany({}),
      models.Message.deleteMany({}),
    ]);
  }
 -------------ROUTES----------------------
 -------- USERS ---------------
  router.get('/', async (req, res) => {
  const users = await req.context.models.User.find();
  return res.send(users);
});

router.get('/:userId', async (req, res) => {
  const user = await req.context.models.User.findById(
    req.params.userId,
  );
  return res.send(user);
});

------------- POSTS ------------
router.get('/', async (req, res) => {
  const posts = await req.context.models.Post.find();
  return res.send(posts);
});


router.get('/:messageId', async (req, res) => {
  const post = await req.context.models.Post.findById(
    req.params.postId,
  );
  return res.send(post);
});

router.post('/', async (req, res) => {
  const post = await req.context.models.Post.create({
    title
    body req.body
    topic

  });
 
  return res.send(post);
});

router.delete('/:postId', async (req, res) => {
  const post = await req.context.models.Post.findById(
    req.params.postId,
  );
 
  if (post) {
    await post.remove();
  }
 
  return res.send(post);
});

------if user delete, delete all messages -----------
userSchema.pre('remove', function(next) {
  this.model('Post').deleteMany({ user: this._id }, next);
});


-------STEPS-------------

----Server.js
is looking for app.use('*start url*', routes.)
Routes, routes index, to sepecific router file, then to controllers index to specific controller



res.json({
    //   name: 'Art', age: 22, isActive: true
    // })

posts SHow for users 

  db.User.findOne({'articles': req.params.id})
    .populate({
      path: 'posts',
      match: {_id: req.params.id}
    })



------------------------Password Validation------------------------------------

const Validator = require("validator");
const isEmpty = require("is-empty");module.exports = function validateRegisterInput(data) {
  let errors = {};// Convert empty fields to an empty string so we can use validator functions
  data.name = !isEmpty(data.name) ? data.name : "";
  data.email = !isEmpty(data.email) ? data.email : "";
  data.password = !isEmpty(data.password) ? data.password : "";
  data.password2 = !isEmpty(data.password2) ? data.password2 : "";// Name checks
  if (Validator.isEmpty(data.name)) {
    errors.name = "Name field is required";
  }// Email checks
  if (Validator.isEmpty(data.email)) {
    errors.email = "Email field is required";
  } else if (!Validator.isEmail(data.email)) {
    errors.email = "Email is invalid";
  }// Password checks
  if (Validator.isEmpty(data.password)) {
    errors.password = "Password field is required";
  }if (Validator.isEmpty(data.password2)) {
    errors.password2 = "Confirm password field is required";
  }if (!Validator.isLength(data.password, { min: 6, max: 30 })) {
    errors.password = "Password must be at least 6 characters";
  }if (!Validator.equals(data.password, data.password2)) {
    errors.password2 = "Passwords must match";
  }return {
    errors,
    isValid: isEmpty(errors)
  };
};


// --------------- Login ------------------
const Validator = require("validator");
const isEmpty = require("is-empty");module.exports = function validateLoginInput(data) {
  let errors = {};// Convert empty fields to an empty string so we can use validator functions
  data.email = !isEmpty(data.email) ? data.email : "";
  data.password = !isEmpty(data.password) ? data.password : "";// Email checks
  if (Validator.isEmpty(data.email)) {
    errors.email = "Email field is required";
  } else if (!Validator.isEmail(data.email)) {
    errors.email = "Email is invalid";
  }// Password checks
  if (Validator.isEmpty(data.password)) {
    errors.password = "Password field is required";
  }return {
    errors,
    isValid: isEmpty(errors)
  };
};


{
	"firstName": "TestDummy"
  "lastName": "Dummy1"
	"username": "TestDude1",
	"email": "testdude@gmail.com",
	"password": "qwerty1234",
}

{
	"firstName": "Test"
  "lastName": "Dummy"
	"username": "TestDude2",
	"email": "testdude@gmail.com",
	"password": "qwerty1234",
  "location": "API
}